{"version":3,"sources":["Cart-items.js","context/GlobalState.js","components/Navbar.js","components/Cartitem.js","components/CartContainer.js","App.js","serviceWorker.js","index.js"],"names":["id","title","price","img","amount","GlobalContext","createContext","GlobalProvider","children","useState","cartItems","cart","setCart","Provider","value","Navbar","useContext","totalAmount","map","cartAmount","reduce","acc","item","className","xmlns","viewBox","d","Cartitem","changeAmount","text","newCart","cItem","remove","console","log","filter","src","alt","onClick","CartContainer","totalCost","toFixed","length","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8QAAe,GACb,CACEA,GAAI,EACJC,MAAO,oBACPC,MAAO,OACPC,IACE,mFACFC,OAAQ,GAEV,CACEJ,GAAI,EACJC,MAAO,gBACPC,MAAO,OACPC,IACE,mFACFC,OAAQ,GAEV,CACEJ,GAAI,EACJC,MAAO,sBACPC,MAAO,OACPC,IACE,mFACFC,OAAQ,ICnBCC,EAAgBC,0BAGhBC,EAAiB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACtBC,mBAASC,GADa,mBACvCC,EADuC,KACjCC,EADiC,KAG9C,OACE,kBAACP,EAAcQ,SAAf,CAAwBC,MAAO,CAACH,EAAMC,IACnCJ,ICcQO,EAvBA,WAAO,IAAD,EACJC,qBAAWX,GAGpBY,EAJa,oBAGEC,KAAI,SAAAC,GAAU,OAAIA,EAAWf,UACtBgB,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAOC,IAAO,GAEjE,OACE,6BACE,yBAAKC,UAAU,cACb,yCACA,yBAAKA,UAAU,iBACb,yBAAKC,MAAM,6BAA6BC,QAAQ,aAC9C,0BAAMC,EAAE,uGAEV,yBAAKH,UAAU,oBACb,uBAAGA,UAAU,gBAAiBN,QC0C3BU,EAzDE,SAAC,GAAuC,IAArC3B,EAAoC,EAApCA,GAAIC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,IAAKC,EAAa,EAAbA,OAAa,EAC9BY,qBAAWX,GADmB,mBAC/CM,EAD+C,KACzCC,EADyC,KAGhDgB,EAAe,SAAC5B,EAAI6B,GACxB,IAAMC,EAAUnB,EAAKO,KAAI,SAAAa,GAQvB,OAPIA,EAAM/B,KAAOA,IACF,SAAT6B,EACFE,EAAM3B,QAAU,EACE,SAATyB,IACTE,EAAM3B,QAAU,IAGb2B,KAETnB,EAAQkB,IAGJE,EAAS,SAAAhC,GACbiC,QAAQC,IAAI,YAAalC,GACzBY,EAAQD,EAAKwB,QAAO,SAAAb,GAAI,OAAIA,EAAKtB,KAAOA,OAG1C,OACE,yBAAKuB,UAAU,aACb,yBAAKa,IAAMjC,EAAMkC,IAAMpC,IACvB,6BACE,4BAAMA,GACN,wBAAIsB,UAAU,cAAd,IAA8BrB,GAE9B,4BAAQqB,UAAU,aAAae,QAAS,kBAAMN,EAAOhC,KAArD,WAEF,6BAEE,4BAAQuB,UAAU,aAAae,QAAS,kBAAMV,EAAa5B,EAAI,UAC7D,yBAAKwB,MAAM,6BAA6BC,QAAQ,aAC9C,0BAAMC,EAAE,iFAIZ,uBAAGH,UAAU,UAAWnB,GAExB,4BAAQmB,UAAU,aAAae,QAAS,WACtC,OAAe,IAAXlC,EACK4B,EAAOhC,GAEP4B,EAAa5B,EAAI,UAG1B,yBAAKwB,MAAM,6BAA6BC,QAAQ,aAC9C,0BAAMC,EAAE,oFCILa,EApDO,WAAO,IAAD,EACFvB,qBAAWX,GADT,mBACnBM,EADmB,KACbC,EADa,KAIpB4B,EAAY7B,EAAKS,QAAO,SAACC,EAAKC,GAAN,OAC5BD,EAAOC,EAAKpB,MAAQoB,EAAKlB,SACxB,GAAGqC,QAAQ,GASd,OAAoB,IAAhB9B,EAAK+B,OAEL,6BAASnB,UAAU,QACjB,gCACE,wCACA,wBAAIA,UAAU,cAAd,wBAQN,6BAASA,UAAU,QACjB,gCACA,yCAEA,iCACCZ,EAAKO,KAAI,SAAAI,GACR,OAAO,kBAAC,EAAD,eAAUqB,IAAKrB,EAAKtB,IAAQsB,QAGrC,gCACE,6BACA,yBAAKC,UAAU,cACb,qCACQ,kCAASiB,KAGnB,4BAAQjB,UAAU,gBAAgBe,QAAS,WAjC/C1B,EAAQ,MAiCJ,iBChCOgC,MATf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.39685d08.chunk.js","sourcesContent":["export default [\r\n  {\r\n    id: 1,\r\n    title: \"Samsung Galaxy S7\",\r\n    price: 599.99,\r\n    img:\r\n      \"https://res.cloudinary.com/diqqf3eq2/image/upload/v1583368215/phone-2_ohtt5s.png\",\r\n    amount: 1\r\n  },\r\n  {\r\n    id: 2,\r\n    title: \"google pixel \",\r\n    price: 499.99,\r\n    img:\r\n      \"https://res.cloudinary.com/diqqf3eq2/image/upload/v1583371867/phone-1_gvesln.png\",\r\n    amount: 1\r\n  },\r\n  {\r\n    id: 3,\r\n    title: \"Xiaomi Redmi Note 2\",\r\n    price: 699.99,\r\n    img:\r\n      \"https://res.cloudinary.com/diqqf3eq2/image/upload/v1583368224/phone-3_h2s6fo.png\",\r\n    amount: 1\r\n  }\r\n];\r\n","import React, { createContext, useState } from 'react'\r\nimport cartItems from '../Cart-items'\r\n\r\n//Create global context\r\nexport const GlobalContext = createContext();\r\n\r\n//Create state and provide it globally inside a provider\r\nexport const GlobalProvider = ({ children }) => {\r\n  const [cart, setCart] = useState(cartItems);\r\n\r\n  return (\r\n    <GlobalContext.Provider value={[cart, setCart]}>\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n}","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nconst Navbar = () => {\r\n  const [cart] = useContext(GlobalContext);\r\n\r\n  const amounts = cart.map(cartAmount => cartAmount.amount);\r\n  const totalAmount = amounts.reduce((acc, item) => (acc += item), 0)\r\n  \r\n  return (\r\n    <nav>\r\n      <div className=\"nav-center\">\r\n        <h3>ReduxGear</h3>\r\n        <div className=\"nav-container\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\r\n            <path d=\"M16 6v2h2l2 12H0L2 8h2V6a6 6 0 1 1 12 0zm-2 0a4 4 0 1 0-8 0v2h8V6zM4 10v2h2v-2H4zm10 0v2h2v-2h-2z\" />\r\n          </svg>\r\n          <div className=\"amount-container\">\r\n            <p className=\"total-amount\">{ totalAmount }</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nconst Cartitem = ({ id, title, price, img, amount }) => {\r\n  const [cart, setCart] = useContext(GlobalContext);\r\n\r\n  const changeAmount = (id, text) => {\r\n    const newCart = cart.map(cItem => {\r\n      if (cItem.id === id) {\r\n        if (text === 'incr') {\r\n          cItem.amount += 1\r\n        } else if (text === 'decr') {\r\n          cItem.amount -= 1\r\n        } \r\n      }\r\n      return cItem\r\n    })\r\n    setCart(newCart)\r\n  }\r\n\r\n  const remove = id => {\r\n    console.log('remove!!!', id)\r\n    setCart(cart.filter(item => item.id !== id))\r\n  };\r\n\r\n  return (\r\n    <div className=\"cart-item\">\r\n      <img src={ img } alt={ title } />\r\n      <div>\r\n        <h4>{ title }</h4>\r\n        <h4 className=\"item-price\">${ price }</h4>\r\n        {/* remove button */}\r\n        <button className=\"remove-btn\" onClick={() => remove(id)}>remove</button>\r\n      </div>\r\n      <div>\r\n        {/* increase amount */}\r\n        <button className=\"amount-btn\" onClick={() => changeAmount(id, 'incr')}>\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\r\n            <path d=\"M10.707 7.05L10 6.343 4.343 12l1.414 1.414L10 9.172l4.243 4.242L15.657 12z\" />\r\n          </svg>\r\n        </button>\r\n        {/* amount */}\r\n        <p className=\"amount\">{ amount }</p>\r\n        {/* decrease amount */}\r\n        <button className=\"amount-btn\" onClick={() => {\r\n          if (amount === 1) {\r\n            return remove(id);\r\n          } else {\r\n            return changeAmount(id, 'incr');\r\n          }\r\n        }}>\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\r\n            <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\r\n          </svg>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Cartitem\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState';\r\nimport Cartitem from './Cartitem'\r\n\r\nconst CartContainer = () => {\r\n  const [cart, setCart] = useContext(GlobalContext);\r\n\r\n  //Calculate total cost and round it to 2 decimal places\r\n  const totalCost = cart.reduce((acc, item) => (\r\n    acc += item.price * item.amount\r\n  ), 0).toFixed(2)\r\n  \r\n\r\n  //Clear cart\r\n  const clearCart = () => {\r\n    setCart([])\r\n  }\r\n  \r\n  //Empty cart rendering\r\n  if (cart.length === 0) {\r\n    return (\r\n      <section className=\"cart\">\r\n        <header>\r\n          <h2>your bag</h2>\r\n          <h4 className=\"empty-cart\">is currently empty</h4>\r\n        </header>\r\n      </section>\r\n    );\r\n  }\r\n\r\n  //Non-Empty cart rendering\r\n  return (\r\n    <section className=\"cart\">\r\n      <header>\r\n      <h2>your bag</h2>\r\n      </header>\r\n      <article>\r\n      {cart.map(item => {\r\n        return <Cartitem key={item.id} {...item} />;\r\n      })}\r\n      </article>\r\n      <footer>\r\n        <hr />\r\n        <div className=\"cart-total\">\r\n          <h4>\r\n            total <span>${ totalCost }</span>\r\n          </h4>\r\n        </div>\r\n        <button className=\"btn clear-btn\" onClick={() => clearCart()}>\r\n          clear cart\r\n        </button>\r\n      </footer>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default CartContainer\r\n","import React from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport CartContainer from './components/CartContainer';\n\nimport { GlobalProvider } from './context/GlobalState';\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <Navbar />\n      <CartContainer />\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}